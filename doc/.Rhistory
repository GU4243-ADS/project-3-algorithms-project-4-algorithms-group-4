ks$state_changed_at <- parse_date_time(ks$state_changed_at, '%m/%d/%y')
ks$time_success <- (ks$state_changed_at - ks$launched_at)
ks$days_success <- ks$time_success/86400 # Divide by the number of seconds in a day to find days_success
range(ks$days_success)
png("../figs/backers.png")
ks %>%
filter(!(backers_count > 500)) %>%
filter(!(backers_count == 0)) %>%
filter(state == "successful") %>%
ggplot(aes(x = backers_count)) +
geom_area(stat = "bin", aes(fill = top_category)) +
labs(x = "Number of Backers", title = "Measuring Kickstarter Performance by Category", subtitle = "Backers") +
scale_fill_manual(values = c("grey20", "grey25", "grey30", "grey35", "grey45", "grey50", "grey55", "grey60", "grey65", "grey70", "grey75", "grey80", "grey85", "grey90", "grey95")) +
theme_tufte() +
theme(axis.ticks = element_blank())
dev.off()
png("../figs/days.png")
ks %>%
group_by(state) %>%
summarize(mean_days = mean(as.numeric(days_success))) %>%
ungroup() %>%
filter(!(state == "live")) %>%
ggplot(aes(x = reorder(state, desc(mean_days)), y = mean_days)) +
geom_bar(stat = "identity") +
labs(x = "", y = "Number of Days (Mean)", title = "Success of Kickstarter Campaigns", subtitle = "Number of days with active status") +
theme_tufte() +
theme(axis.line = element_blank(),
axis.ticks = element_blank())
dev.off()
population <- read_csv("../data/population_2010.csv")
ks <- inner_join(ks, population, by = "location_state")
ks$pop_min <- min(ks$population)
ks$pop_max <- max(ks$population)
ks$pop_normalized <- round((ks$population - ks$pop_min) / (ks$pop_max - ks$pop_min), digits = 4)
success_by_state <- ks %>%
filter(state == "successful") %>%
group_by(state_name, pop_normalized) %>%
tally() %>%
ungroup() %>%
mutate(n_pop = round(n/pop_normalized, digits = 0))
success_by_city <- ks %>%
filter(state == "successful") %>%
group_by(location_town) %>%
tally() %>%
ungroup()
success_by_city <- success_by_city[-(1:102), ]
ks2 <- inner_join(ks, success_by_city, by = "location_town")
ks2 <- plyr::rename(ks2, c("n.x" = "n_state", "n.y" = "n_city")) %>%
filter(state == "successful")
## Code to create csv for shape file in QGIS
#ks2$city_state <- paste(ks2$location_town, ks2$location_state, sep = ", ")
#latlon <- read_csv("../data/us_latlon.csv")
#latlon$city_state <- paste(latlon$city, latlon$region, sep = ", ")
#ll <- latlon[!duplicated(latlon[, c('city_state')]),]
#latlong <- inner_join(ks2, ll, by = "city_state")
#write_csv(latlong, "../data/us_cities.csv")
### Provide a leaflet map showing the most innovative states and cities in the U.S. on a single map
pal <- colorQuantile("Greys", NULL, n = 5)
cities = readOGR(dsn = "../data/", layer = "cities_merged_wgs84")
states = readOGR(dsn = "../data/", layer ="merged_wgs84")
content <- paste("City:", success_by_city$location_town, "<br/>",
"Number of Successful Kickstarts:", success_by_city$n, "<br/>")
leaflet(options = leafletOptions(minZoom = 3)) %>%
setView(lat = 37.0902, lng = -95.7129, zoom = 1) %>%
addProviderTiles(providers$CartoDB.Positron, group = "Simple") %>%
addPolygons(data = states,
stroke = FALSE,
fillColor = ~pal(as.numeric(n_pop)),
fillOpacity = 0.8,
weight = 1,
group = "States") %>%
addCircleMarkers(data = cities, radius = 1, stroke = FALSE, fillOpacity = 0.5, color = "black", popup = content, group = "Cities") %>%
addLayersControl(
baseGroups = c("Simple"),
overlayGroups = c("States", "Cities"),
options = layersControlOptions(collapsed = TRUE)
)
bad <- ks %>%
filter(state == "failed") # Failed projects to avoid bias from canceled or suspended kickstarter projects
set.seed(1192) # Set seed for reproducible results
bad <- bad[sample(nrow(bad), 1000), ] # Random sample
good <- ks %>%
filter(state == "successful")
good <- good[order(desc(good$achievement_ratio)), ]
good <- good[1:1000, ]
ks3 <- rbind(bad, good)
#ks_df <- data.frame(ks3$id, ks3$blurb, ks3$backers_count, ks3$state, #ks3$top_category, ks3$achievement_ratio, ks3$days_success)
#colnames(ks_df) <- c("doc_id", "text", "backers_count", "state", "top_category", "achievement_ratio", "days_success")
#ks_df <- DataframeSource(ks_df)
#ks_corpus <- VCorpus(ks_df)
#ks4 <- tm_map(ks_corpus, function(x) iconv(enc2utf8(x), sub = "byte"))
#ks4$blurb <- stri_enc_toutf8(ks4$blurb)
#ks4 <- ks3
#ks4$blurb <- removeNumbers(ks4$blurb)
#ks4$blurb <- removePunctuation(ks4$blurb)
#ks4$blurb <- tolower(ks4$blurb)
ks4 <- data_frame(ks3$id, ks3$blurb, ks3$state, ks3$top_category)
colnames(ks4) <- c("id", "blurb", "state", "category")
ks_word <- ks4 %>%
unnest_tokens(word, blurb)
ks_word$word <- replace_number(ks_word$word)
ks_word$word <- replace_contraction(ks_word$word)
ks_word$word <- replace_symbol(ks_word$word)
ks_word$word <- removeNumbers(ks_word$word)
ks_word$word <- removePunctuation(ks_word$word)
ks_word$word <- stripWhitespace(ks_word$word)
ks_word$word <- tolower(ks_word$word)
ks_word <- anti_join(ks_word, stop_words, by = "word")
ks_word <- ks_word %>%
filter(!(word == ""))
# Document term matrix
ks_dtm <- ks_word %>%
group_by(id, word) %>%
count() %>%
spread(word, n)
# Words is a list of words, and freqs their frequencies among successful projects
#ks_tf_idf <- ks_dtm %>%
#  bind_tf_idf(word, id, count) %>%
#  arrange(desc(tf_idf))
#ks_good <- ks_word %>%
#  filter(state == "successful")
#words <- count(group_by(ks_good, word))$word
#freqs <- count(group_by(ks_good, word))$n
# instead of stemming all the words, replace games with game
ks_word$word[ks_word$word == "games"] <- "game"
ks_word$word[ks_word$word == "threed"] <- "3D"
# word frequency
ks_count <- ks_word %>%
group_by(state, word) %>%
count() %>%
ungroup()
png("../figs/Wordcloud_all.png")
wordcloud(ks_count$word[ks_count$state == "successful"], ks_count$n[ks_count$state == "successful"], scale = c(5, .2), min.freq = 3, max.words = 20, random.order = FALSE, rot.per = .15, colors = "black")
dev.off()
png("../figs/frequency.png")
ks_count %>%
filter(state == "successful") %>%
filter(n > 30) %>%
ggplot(aes(reorder(word, n), n)) +
geom_bar(stat = "identity") +
geom_text(aes(label=n, x=word, y=n), hjust = 1, color="white") +
xlab(NULL) +
ylab(NULL) +
coord_flip() +
theme_tufte() +
theme(axis.ticks = element_blank()) +
ggtitle("Most Frequent Terms in Kickstarter Campaigns")
dev.off()
top25 <- ks_count %>%
filter(word == "game" | word == "art" | word == "music" | word == "life" | word == "world" | word == "easy" | word == "create" | word == "love" | word == "designed" | word == "edition" | word == "3D" | word == "hand" | word == "album" | word == "film" | word == "based" | word == "book" | word == "project" | word == "series" | word == "food" | word == "people" | word == "time" | word == "dice" | word == "unique" | word == "playing" | word == "handmade")
top25$n <- ifelse(top25$state == "successful",
top25$n ,top25$n*-1)
png("../figs/top25.png")
ggplot(top25, aes(x = reorder(word, n), y = n, fill = state)) +
geom_bar(data = filter(top25, state == "successful"), stat = "identity") +
geom_bar(data = filter(top25, state == "failed"), stat = "identity") +
scale_fill_brewer(direction = -1) +
scale_fill_manual(values = c("gray30", "gray70")) +
labs(x = "", y = "", title = "Frequency of Top 25 Words of Kickstarter Campaigns", subtitle = "Comparison of success and failure") +
coord_flip() +
theme_tufte() +
theme(axis.ticks = element_blank())
dev.off()
ks3$len <- str_length(stri_enc_toutf8(ks3$blurb))
png("../figs/median_sentence.png")
ks3 %>%
group_by(state) %>%
summarise(CountMedian = median(len, na.rm = TRUE)) %>%
ungroup() %>%
mutate(state = reorder(state,CountMedian)) %>%
ggplot(aes(x = state,y = CountMedian)) +
geom_bar(stat='identity',colour="white", fill = "gray60") +
labs(x = "",
y = "Sentence Length (Number of Characters)",
title = "Median Sentence Length of Successful and Failed Projects") +
coord_flip() +
theme_tufte() +
theme(axis.ticks = element_blank())
dev.off()
png("../figs/word_length.png")
ks3 %>%
ggplot(aes(x = len, fill = state)) +
geom_histogram() +
scale_fill_manual( values = c("gray80","gray40")) +
facet_wrap(~state) +
labs(x= 'Length of Blurb',
y = 'Count',
title = "Distribution of Blurb Length") +
theme_tufte() +
theme(axis.ticks = element_blank())
#ev.off()
flesch <- textstat_readability(ks3$blurb, measure = c('Flesch', 'Flesch.Kincaid', 'meanSentenceLength', 'meanWordSyllables'))
ks5 <- cbind(ks3, flesch) %>%
filter(backers_count < 20000)
png("../figs/flesch.png")
ks5 %>%
filter(state == "successful") %>%
ggplot(aes(x = Flesch, y = backers_count)) +
geom_point() +
labs(x = 'Flesch Reading Ease',
y = 'Number of Backers',
title = 'Kickstarter Success',
subtitle = 'Readibility of Blurbs') +
theme_tufte() +
theme(axis.ticks = element_blank())
dev.off()
ks_afinn <- ks_word %>%
group_by(id, state, word) %>%
count() %>%
ungroup() %>%
inner_join(get_sentiments("afinn"), by = "word") %>%
mutate(n_score = n*score) %>%
group_by(id) %>%
mutate(tone = sum(n_score)) %>%
ungroup()
png("../figs/afinn.png")
ggplot(ks_afinn, aes(x = state, y = tone)) +
geom_violin(scale = "area", aes(fill = state)) +
coord_flip() +
scale_fill_manual(values = c("gray45", "gray75")) +
labs(x = "", y = "Tone", title = "Sentiment of Kickstarter Campaigns", subtitle = "Comparison of successful and failed campaigns") +
theme_tufte() +
theme(legend.position = "none",
axis.ticks = element_blank())
dev.off()
ks_sent <- ks_afinn %>%
mutate(sent = ifelse(score > 0, "positive", "negative")) %>%
group_by(word, sent) %>%
count() %>%
ungroup()
png("../figs/wordcloud_positive.png")
wordcloud(ks_sent$word[ks_sent$sent == "positive"], ks_sent$nn[ks_sent$sent == "positive"], scale = c(5, .2), min.freq = 3, max.words = 15, random.order = FALSE, rot.per = .15, colors = "gray80")
dev.off()
png("../figs/wordlcloud_negative.png")
wordcloud(ks_sent$word[ks_sent$sent == "negative"], ks_sent$nn[ks_sent$sent == "negative"], scale = c(5, .2), min.freq = 3, max.words = 15, random.order = FALSE, rot.per = .15, colors = "gray20")
dev.off()
ks_nrc <- ks_word %>%
inner_join(get_sentiments('nrc'), by = "word") %>%
count(state, sentiment)
png("../figs/nrc.png")
ggplot(ks_nrc) +
geom_col(aes(x = sentiment, y = n, fill = sentiment)) +
scale_fill_manual(values = c("gray80", "gray75", "gray70", "gray65", "gray60", "gray55", "gray50", "gray45", "gray40", "gray35")) +
coord_flip() +
labs(x = "", y = "", title = "Sentiments for Kickstarter Campaigns", subtitle = "Failed and Successful Projects") +
facet_wrap(~state) +
theme_tufte() +
theme(axis.ticks = element_blank(),
legend.position = "none")
dev.off()
ggplot(category_success, aes(x = reorder(top_category, mean_achievement), y = mean_achievement)) +
geom_bar(stat = "identity", aes(fill = reorder(top_category, mean_achievement))) +
scale_fill_manual(values = c("grey20", "grey25", "grey30", "grey35", "grey45", "grey50", "grey55", "grey60", "grey65", "grey70", "grey75", "grey80", "grey85", "grey90", "grey95")) +
coord_flip() +
labs(x = "", y = "Achievement Ratio (Mean)", title = "Measuring kickstarter campaigns performance by category", subtitle = "Mean of achievement ratio") +
theme_tufte() +
theme(legend.position = "none",
axis.line = element_blank(),
axis.ticks = element_blank())
ggplot(ks_normal, aes(x = reorder(top_category, ach_n), y =  ach_n)) +
geom_bar(stat = "identity", aes(fill = reorder(top_category, ach_n))) +
scale_fill_manual(values = c("grey20", "grey25", "grey30", "grey35", "grey45", "grey50", "grey55", "grey60", "grey65", "grey70", "grey75", "grey80", "grey85", "grey90", "grey95")) +
coord_flip() +
labs(x = "", y = "Achievement Ratio (Normalized)", title = "Measuring kickstarter campaigns performance by category", subtitle = "Normalized achievement ratio") +
theme_tufte() +
theme(legend.position = "none",
axis.line = element_blank(),
axis.ticks = element_blank())
ks %>%
filter(!(backers_count > 500)) %>%
filter(!(backers_count == 0)) %>%
filter(state == "successful") %>%
ggplot(aes(x = backers_count)) +
geom_area(stat = "bin", aes(fill = top_category)) +
labs(x = "Number of Backers", title = "Measuring Kickstarter Performance by Category", subtitle = "Backers") +
scale_fill_manual(values = c("grey20", "grey25", "grey30", "grey35", "grey45", "grey50", "grey55", "grey60", "grey65", "grey70", "grey75", "grey80", "grey85", "grey90", "grey95")) +
theme_tufte() +
theme(axis.ticks = element_blank())
#png("../figs/backers.png")
ks %>%
filter(!(backers_count > 500)) %>%
filter(!(backers_count == 0)) %>%
filter(state == "successful") %>%
ggplot(aes(x = backers_count)) +
geom_area(stat = "bin", aes(fill = top_category)) +
labs(x = "Number of Backers", y = "", title = "Measuring Kickstarter Performance by Category", subtitle = "Backers") +
scale_fill_manual(values = c("grey20", "grey25", "grey30", "grey35", "grey45", "grey50", "grey55", "grey60", "grey65", "grey70", "grey75", "grey80", "grey85", "grey90", "grey95")) +
theme_tufte() +
theme(axis.ticks = element_blank())
png("../figs/backers.png")
ks %>%
filter(!(backers_count > 500)) %>%
filter(!(backers_count == 0)) %>%
filter(state == "successful") %>%
ggplot(aes(x = backers_count)) +
geom_area(stat = "bin", aes(fill = top_category)) +
labs(x = "Number of Backers", y = "", title = "Measuring Kickstarter Performance by Category", subtitle = "Backers") +
scale_fill_manual(values = c("grey20", "grey25", "grey30", "grey35", "grey45", "grey50", "grey55", "grey60", "grey65", "grey70", "grey75", "grey80", "grey85", "grey90", "grey95")) +
theme_tufte() +
theme(axis.ticks = element_blank())
dev.off()
#png("../figs/backers.png")
ks %>%
filter(!(backers_count > 500)) %>%
filter(!(backers_count == 0)) %>%
filter(state == "successful") %>%
ggplot(aes(x = backers_count)) +
geom_area(stat = "bin", aes(fill = top_category)) +
labs(x = "Number of Backers", y = "", title = "Measuring Kickstarter Performance by Category", subtitle = "Backers") +
scale_fill_manual(values = c("grey20", "grey25", "grey30", "grey35", "grey45", "grey50", "grey55", "grey60", "grey65", "grey70", "grey75", "grey80", "grey85", "grey90", "grey95")) +
theme_tufte() +
theme(axis.ticks = element_blank())
#png("../figs/days.png")
ks %>%
group_by(state) %>%
summarize(mean_days = mean(as.numeric(days_success))) %>%
ungroup() %>%
filter(!(state == "live")) %>%
ggplot(aes(x = reorder(state, desc(mean_days)), y = mean_days)) +
geom_bar(stat = "identity") +
labs(x = "", y = "Number of Days (Mean)", title = "Success of Kickstarter Campaigns", subtitle = "Number of days with active status") +
theme_tufte() +
theme(axis.line = element_blank(),
axis.ticks = element_blank())
wordcloud(ks_count$word[ks_count$state == "successful"], ks_count$n[ks_count$state == "successful"], scale = c(5, .2), min.freq = 3, max.words = 20, random.order = FALSE, rot.per = .15, colors = "black")
#dev.off()
#png("../figs/frequency.png")
ks_count %>%
filter(state == "successful") %>%
filter(n > 30) %>%
ggplot(aes(reorder(word, n), n)) +
geom_bar(stat = "identity") +
geom_text(aes(label=n, x=word, y=n), hjust = 1, color="white") +
xlab(NULL) +
ylab(NULL) +
coord_flip() +
theme_tufte() +
theme(axis.ticks = element_blank()) +
ggtitle("Most Frequent Terms in Kickstarter Campaigns")
s
#png("../figs/top25.png")
ggplot(top25, aes(x = reorder(word, n), y = n, fill = state)) +
geom_bar(data = filter(top25, state == "successful"), stat = "identity") +
geom_bar(data = filter(top25, state == "failed"), stat = "identity") +
scale_fill_brewer(direction = -1) +
scale_fill_manual(values = c("gray30", "gray70")) +
labs(x = "", y = "", title = "Frequency of Top 25 Words of Kickstarter Campaigns", subtitle = "Comparison of success and failure") +
coord_flip() +
theme_tufte() +
theme(axis.ticks = element_blank())
png("../figs/word_length.png")
ks3 %>%
ggplot(aes(x = len, fill = state)) +
geom_histogram() +
scale_fill_manual( values = c("gray80","gray40")) +
facet_wrap(~state) +
labs(x= 'Length of Blurb',
y = 'Count',
title = "Distribution of Blurb Length") +
theme_tufte() +
theme(axis.ticks = element_blank())
dev.off()
ks3 %>%
group_by(state) %>%
summarise(CountMedian = median(len, na.rm = TRUE)) %>%
ungroup() %>%
mutate(state = reorder(state,CountMedian)) %>%
ggplot(aes(x = state,y = CountMedian)) +
geom_bar(stat='identity',colour="white", fill = "gray60") +
labs(x = "",
y = "Sentence Length (Number of Characters)",
title = "Median Sentence Length of Successful and Failed Projects") +
coord_flip() +
theme_tufte() +
theme(axis.ticks = element_blank())
#dev.off()
#png("../figs/word_length.png")
ks3 %>%
ggplot(aes(x = len, fill = state)) +
geom_histogram() +
scale_fill_manual( values = c("gray80","gray40")) +
facet_wrap(~state) +
labs(x= 'Length of Blurb',
y = 'Count',
title = "Distribution of Blurb Length") +
theme_tufte() +
theme(axis.ticks = element_blank())
#png("../figs/word_length.png")
ks3 %>%
ggplot(aes(x = len, fill = state)) +
geom_histogram() +
scale_fill_manual( values = c("gray80","gray40")) +
facet_wrap(~state) +
labs(x= 'Length of Blurb',
y = '',
title = "Distribution of Blurb Length") +
theme_tufte() +
theme(axis.ticks = element_blank())
#png("../figs/flesch.png")
ks5 %>%
filter(state == "successful") %>%
ggplot(aes(x = Flesch, y = backers_count)) +
geom_point() +
labs(x = 'Flesch Reading Ease',
y = 'Number of Backers',
title = 'Kickstarter Success',
subtitle = 'Readibility of Blurbs') +
theme_tufte() +
theme(axis.ticks = element_blank())
#png("../figs/afinn.png")
ggplot(ks_afinn, aes(x = state, y = tone)) +
geom_violin(scale = "area", aes(fill = state)) +
coord_flip() +
scale_fill_manual(values = c("gray45", "gray75")) +
labs(x = "", y = "Tone", title = "Sentiment of Kickstarter Campaigns", subtitle = "Comparison of successful and failed campaigns") +
theme_tufte() +
theme(legend.position = "none",
axis.ticks = element_blank())
wordcloud(ks_sent$word[ks_sent$sent == "positive"], ks_sent$nn[ks_sent$sent == "positive"], scale = c(5, .2), min.freq = 3, max.words = 15, random.order = FALSE, rot.per = .15, colors = "gray80")
#dev.off()
#png("../figs/wordlcloud_negative.png")
wordcloud(ks_sent$word[ks_sent$sent == "negative"], ks_sent$nn[ks_sent$sent == "negative"], scale = c(5, .2), min.freq = 3, max.words = 15, random.order = FALSE, rot.per = .15, colors = "gray20")
#png("../figs/nrc.png")
ggplot(ks_nrc) +
geom_col(aes(x = sentiment, y = n, fill = sentiment)) +
scale_fill_manual(values = c("gray80", "gray75", "gray70", "gray65", "gray60", "gray55", "gray50", "gray45", "gray40", "gray35")) +
coord_flip() +
labs(x = "", y = "", title = "Sentiments for Kickstarter Campaigns", subtitle = "Failed and Successful Projects") +
facet_wrap(~state) +
theme_tufte() +
theme(axis.ticks = element_blank(),
legend.position = "none")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/Nicole/Documents/GitHub/project-3-algorithms-project-4-algorithms-group-4/doc")
setwd("/Users/admin/Desktop/Columbia/Spring 2018/Applied DS/GitHub/project-3-algorithms-project-4-algorithms-group-4/doc")
setwd("/Users/Nicole/Documents/GitHub/project-3-algorithms-project-4-algorithms-group-4/doc")
load(file = "../data/MS_UI.RData")
load(file = "../data/movie_UI.RData")
mov.train <- movie_UI # to clarify that this is training data
k = 6 # number of ratings
users <- rownames(mov.train)
items <- colnames(mov.train) # used items as a generic for both movies and vroots
mu <- vector(mode = "double", length = C)
gamma <- array(0, dim = c(length(items), C, k)) # dims = items(movies), clusters, ratings
C <- 12 # Half of the movie genres according to IMDB
mu <- vector(mode = "double", length = C)
gamma <- array(0, dim = c(length(items), C, k)) # dims = items(movies), clusters, ratings
cluster.probs <- matrix((1/6), nrow = length(users), ncol = C) # cluster assignment matrix
View(cluster.probs)
View(mu)
View(gamma)
library(EMCluster)
View(simple.init)
load(file = "../data/MS_UI.RData")
rm(list = ls())
load(file = "../data/MS_UI.RData")
load(file = "../data/movie_UI.RData")
mu <- vector(1/c, length = C)
args(vector)
mu <- rep(1/C, C)
C <- 12 # Half of the movie genres according to IMDB
mu <- rep(1/C, C)
View(mu)
# Below takes 2.17 minutes
MS_UI <- MS_data_transform(MS_train)
setwd("/Users/Nicole/Documents/GitHub/project-3-algorithms-project-4-algorithms-group-4/doc")
source("../lib/functions.R")
MS_UI <- MS_data_transform(MS_train)
save(MS_UI, file = "../data/MS_UI.RData")
setwd("/Users/Nicole/Documents/GitHub/project-3-algorithms-project-4-algorithms-group-4/doc")
source("../lib/functions.R")
# Load the data
MS_train <- read.csv("../data/MS_sample/data_train.csv", as.is = TRUE, header = TRUE)
MS_train <- MS_train[, 2:4]
# Below takes 2.17 minutes
MS_UI <- MS_data_transform(MS_train)
save(MS_UI, file = "../data/MS_UI.RData")
load(file = "../data/MS_UI.RData")
load(file = "../data/movie_UI.RData")
View(MS_UI_test)
rm(MS_UI_test)
rm(MS_train)
load(file = "../data/MS_UI.RData")
rm(list = ls)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
read.csv("q7.3a")
read.csv("q7.3a.csv")
kable(b)
b <- read.csv("q7.3b.csv")
kable(b)
library(knitr)
a <- read.csv("q7.3a.csv")
kable(a)
b <- read.csv("q7.3b.csv")
kable(b)
true.ATE.a <- mean(a$Y1) - mean(a$Y0)
colnames(a)
(unbiased.ATE.a <- mean(a$Y1_r1) - mean(a$Y0_r0))
a <- read.csv("q7.3a.csv")
(true.ATE.a <- mean(a$Y1) - mean(a$Y0))
(unbiased.ATE.a <- mean(a$Y1_r1) - mean(a$Y0_r0))
(unbiased.ATE.a <- mean(a$Y1_r1, na.rm = TRUE) - mean(a$Y0_r0, na.rm = TRUE))
a <- read.csv("q7.3a.csv")
(true.ATE.a <- mean(a$Y1) - mean(a$Y0))
(unbiased.ATE.a <- mean(a$Y1_r1, na.rm = TRUE) - mean(a$Y0_r0, na.rm = TRUE))
kable(a)
b <- read.csv("q7.3b.csv")
(true.ATE.b <- mean(b$Y1) - mean(b$Y0))
(unbiased.ATE.b <- mean(b$Y1_r1, na.rm = TRUE) - mean(b$Y0_r0, na.rm = TRUE))
kable(b)
