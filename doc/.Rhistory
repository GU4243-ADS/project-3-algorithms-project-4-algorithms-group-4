temp <- array(temp, c(k, length(users), C)) # puts data in the correct shape. dims = (ratings, users, clusters)
pre_aic[i,,] <- temp[i,,] # extract only the row for which the log sums over the correct subset of gammas_(k=i, j, c). dims = (ratings, users, clusters)
}
pre_aic <- t(colSums(pre_aic))  #  log sums over all ratings k the (previous) logsum of gammas of the j movies rated k=i, for each user i. dims = (C, i) # pre_aic is now the matrix of the part of the equation after the Pi in both the numerator and denominator for each C,i combination
#pre_aic <- exp(pre_aic) # returns our expression to the non-logged world #^^^^^^^^
#conclusion of above: basically took the logsum/product of all the movies rated 1 (then 2,...) for user i in cluster 1 wieghts, then log summed all those log sums over all ratings k for each user i
aic_numer <- log(mu) + pre_aic # gives the numerator of aic. dims = (C, i) #I am assuming C clusters are still oriented 1:C in the same order in both mu and pre_aic
#^^^^^^^^^ is logging then adding (not multiplying) mu the right thing to do?
aic_numer <- t(aic_numer) # dims = (users, Clusters)
aic_denom <- log(rowSums(exp(aic_numer)))  # every user gets the same denom over all the clusters (here: 1 cluster = 1 row). dims = vector length(users)
#^^^^^^^^^^^^^^ here I am exp'ing the numer to return to the non-logged world, summing as demanded to produce denom, then logging that denom to be compatible with the logged state of the numer
#aic <- aic_numer/aic_denom #^^^^^^^^ # dims = (users, clusters) # NaNs introduced.... :(
aic <- aic_numer - aic_denom #^^^^^^^^^^^ this is equivalent to dividing because I am subtracting two logged entities.
# but isn't aic really logged(aic) now.... so won't it be incompatible with my processes in the M-step...???
aic <- exp(aic) # not logged anymore
######################## Step 3 - Maximization #########################
## Estimate Mu
mu <- apply(aic, 2, sum)/length(users) # vector of cluster shares/probabilities
## Estimate Gamma
#gamma <- function() { # this is func is just diagnostic while I am still coding
indicator.numer <- array(0, dim = c(length(users),length(items), k))
indicator.denom <- matrix(0, nrow = length(users), ncol = length(items))
for (i in 1:k)
# can this be done with an apply appoach? yes, apply and margin = 3? but how to use apply with multiple funcs and subsetting, maybe define a func like below?
{
indicator.numer[,,i][which(data == i)] <- 1 # indicator array to identify each instance in which user i rated movie j with rating k
}
indicator.numer <- aperm(indicator.numer, c(2,1,3)) # transposing so that the matrix is conformable to aic. new dims = (movies/items, users, ratings)
# would transposing each sheet in the for loop be faster?
# maybe faster to transpose aic rather than aperm indicator.nomin
numer <- apply(indicator.numer, 3, function(x) x%*%aic) # each element of resulting array represents the sum of the class C aic wieghts of every user who rated that jth movie with that rating k. apply() outputs matrix with weird dims = (length(seq_along(\the result of the func on each sheet\)), number of sheets in third margin)
numerator <- array(numer, c(length(items), C, k)) # puts data in the correct shape. dims = (movies, clusters, ratings)
indicator.denom[which(data != 0)] <- 1 # indicator array to identify each instance in which user i rated movie j with any rating
indicator.denom <- t(indicator.denom) # dims = movies, users.
denominator <- indicator.denom%*%aic # each element of the resulting matrix represents the sum of the class C aic weights of every user who rated movie j with any rating. dims = (movies, clusters). Note: denominator is common across ratings k, but not across clusters, there for the following code would be unecessary: denominator <- apply(indicator.denom, 3, function(x) x%*%aic)
#result <- nominator/denominator # dims = movies, clusters, ratings
result <- apply(numerator, 3, function(x) x/denominator) # divides each numerator element by its respective denominator value. apply() returns a weirdly shaped matrix again.
gamma <- array(result, c(length(items), C, k)) # puts data in the correct shape. dims = (movies, clusters, ratings)
#gamma
#} # end of the diagnostic func
#system.time(new <- gamma())
#rowSums(aperm(new, c(1, 3, 2))[,,1]) # this sums over k's for each movie. The sums should equal 1. They do!!!  but I have some NaNs which are introduced when I divide the numerator by the denominator. ... what to do... logs...? just set them to 0??
# FIX NaNs: log the numerator and the denominator then subtract.
################# Step 4 - Convergence Conditions using l-2 norm ###############
is.conv <- norm(aic - aic_pre, type = "2") # measure of the change in cluster assignments
### Hard Assignment
hard.assignments <- (aic == rowMaxs(aic)) + 0 # I used a function from "MatrixsStats" library
#hard.cluster <- apply(aic, 1, which.max) # hard cluster assignments
return(list("hard.assignments" = hard.assignments, "gamma" = gamma, "mu" = mu))
aic <- matrix(NA, nrow = n.users, ncol = C)
hard.assignments <- matrix(0, nrow = n.users, ncol = C)
hard.assignment[, 5] <- rep(1, n.users)
hard.assignments[, 5] <- rep(1, n.users)
head(hard.assignments)
predict.rank <- matrix(0, nrow = n.users)
for (k in 1:6){
predict.rank <- predict.rank + k * hard.assignments %*% gamma[, C, k] # non-conformable arguments...
}
dim(gamma)
dim(hard.assignments)
predict.rank <- predict.rank + k * hard.assignments %*% gamma[, 12, k] # non-conformable arguments...
gamma[, 1, 1]
View(gamma[, 1, 1])
predict.rank <- predict.rank + k * hard.assignments %*% gamma[C, , k] # non-conformable arguments...
for (j in 1:n.items) {
data[, j] <- bayesian_predict(data, j, aic, gamma)}
###########
### Inputs:
# active.users = the test data user-item matrix
# hard.assignments = the hard.assignments output from the EM_train func
hard.assignments <- matrix(0, nrow = n.users, ncol = C)
hard.assignments[, 5] <- rep(1, n.users)
bayesian_predict <-function(data, j,  hard.assignments, gamma){
n.users <- dim(data)[1]
predict.rank <- matrix(0, nrow = n.users)
for (k in 1:6){
predict.rank <- predict.rank + k * hard.assignments %*% gamma[C, , k]
}
n.items <- dim(data)[2]
for (j in 1:n.items) {
mov.train[, j] <- bayesian_predict(mov.train, j, hard.assignments, gamma)}
View(predict.rank)
mov.train[ , 1]
View(mov.train[, j])
n.items <- dim(mov.train)[2]
mov.train[, j] <- bayesian_predict(mov.train, j, hard.assignments, gamma)}
for (j in 1:n.items) {
mov.train[, j] <- bayesian_predict(mov.train, j, hard.assignments, gamma)}
mov.train[ ,1]
dim(mov.train[ ,1])
length(mov.train[ , 1])
length(predict.rank)
mov.train.predict[, j] <- bayesian_predict(mov.train, j, hard.assignments, gamma)}
for (j in 1:n.items) {
mov.train.predict[, j] <- bayesian_predict(mov.train, j, hard.assignments, gamma)}
mov.train[], j] <- bayesian_predict(mov.train, j, hard.assignments, gamma)}
for (j in 1:n.items) {
mov.train[, j] <- bayesian_predict(mov.train, j, hard.assignments, gamma)}
dim(predict.rank)
dim(mov.train)
length(n.items)
n.items <- dim(mov.train)[2]
n.items
###########
### Inputs:
# active.users = the test data user-item matrix
# hard.assignments = the hard.assignments output from the EM_train func
hard.assignments <- matrix(0, nrow = n.users, ncol = C)
hard.assignments[, 5] <- rep(1, n.users)
bayesian_predict <-function(data, j,  hard.assignments, gamma){
n.users <- dim(data)[1]
predict.rank <- matrix(0, nrow = n.users)
for (k in 1:6){
predict.rank <- predict.rank + k * hard.assignments %*% gamma[C, , k]
}
n.items <- dim(mov.train)[2]
for (j in 1:n.items) {
mov.train[, j] <- bayesian_predict(mov.train, j, hard.assignments, gamma)}
View(predict.rank)
return(mov.train)
aic <- matrix(1/C, nrow = n.users, ncol = C)
mu <- apply(aic, 2, sum)/length(users) # vector of cluster shares/probabilities
## Estimate Gamma
#gamma <- function() { # this is func is just diagnostic while I am still coding
indicator.numer <- array(0, dim = c(length(users),length(items), k))
indicator.denom <- matrix(0, nrow = length(users), ncol = length(items))
for (i in 1:k)
# can this be done with an apply appoach? yes, apply and margin = 3? but how to use apply with multiple funcs and subsetting, maybe define a func like below?
{
indicator.numer[,,i][which(data == i)] <- 1 # indicator array to identify each instance in which user i rated movie j with rating k
}
indicator.numer <- aperm(indicator.numer, c(2,1,3)) # transposing so that the matrix is conformable to aic. new dims = (movies/items, users, ratings)
# would transposing each sheet in the for loop be faster?
# maybe faster to transpose aic rather than aperm indicator.nomin
numer <- apply(indicator.numer, 3, function(x) x%*%aic) # each element of resulting array represents the sum of the class C aic wieghts of every user who rated that jth movie with that rating k. apply() outputs matrix with weird dims = (length(seq_along(\the result of the func on each sheet\)), number of sheets in third margin)
aic <- matrix(1/C, nrow = n_users, ncol = C) # cluster assignment/probability matrix, dims = users, clusters
mu <- apply(aic, 2, sum)/length(users) # vector of cluster shares/probabilities
## Estimate Gamma
#gamma <- function() { # this is func is just diagnostic while I am still coding
indicator.numer <- array(0, dim = c(length(users),length(items), k))
indicator.denom <- matrix(0, nrow = length(users), ncol = length(items))
for (i in 1:k)
# can this be done with an apply appoach? yes, apply and margin = 3? but how to use apply with multiple funcs and subsetting, maybe define a func like below?
{
indicator.numer[,,i][which(data == i)] <- 1 # indicator array to identify each instance in which user i rated movie j with rating k
}
indicator.numer <- aperm(indicator.numer, c(2,1,3)) # transposing so that the matrix is conformable to aic. new dims = (movies/items, users, ratings)
# would transposing each sheet in the for loop be faster?
# maybe faster to transpose aic rather than aperm indicator.nomin
numer <- apply(indicator.numer, 3, function(x) x%*%aic) # each element of resulting array represents the sum of the class C aic wieghts of every user who rated that jth movie with that rating k. apply() outputs matrix with weird dims = (length(seq_along(\the result of the func on each sheet\)), number of sheets in third margin)
numerator <- array(numer, c(length(items), C, k)) # puts data in the correct shape. dims = (movies, clusters, ratings)
indicator.denom[which(data != 0)] <- 1 # indicator array to identify each instance in which user i rated movie j with any rating
indicator.denom <- t(indicator.denom) # dims = movies, users.
denominator <- indicator.denom%*%aic # each element of the resulting matrix represents the sum of the class C aic weights of every user who rated movie j with any rating. dims = (movies, clusters). Note: denominator is common across ratings k, but not across clusters, there for the following code would be unecessary: denominator <- apply(indicator.denom, 3, function(x) x%*%aic)
#result <- nominator/denominator # dims = movies, clusters, ratings
result <- apply(numerator, 3, function(x) x/denominator) # divides each numerator element by its respective denominator value. apply() returns a weirdly shaped matrix again.
gamma <- array(result, c(length(items), C, k))
rowSums(aic)
dim(gamma)
rank = na.omit(mov.train[i, ])
for(c in 1:C) {
for(k in 1:6){
aic[i, c] <- aic[i, c]*gamma[mov.train[i, k], c, rank[k]]
k
l
n
}
for(i in 1:n.users){
rank = na.omit(mov.train[i, ])
for(c in 1:C) {
for(k in 1:6){
aic[i, c] <- aic[i, c]*gamma[mov.train[i, k], c, rank[k]]
}
dim(gamma)
mov.train[1, 2]
gamma.norm <- gamma/mean(gamma)
dim(gamma.norm)
mov.train[1, ]
dim(rank)
for(i in 1:n.users){
movies <- mov.train[i,]
rank <- na.omit(mov.train[i, ])
for(c in 1:C) {
for(k in 1:6){
aic[i, c] <- aic[i, c]*gamma.norm[mov.train[i, k], c, rank[k]]
}
return(list(rank = rank, movies = movies))
}
for(i in 1:n.users){
movies <- mov.train[i,]
rank <- na.omit(mov.train[i, ])
return(list(rank = rank, movies = movies))
}
View(rank)
View(movies)
for(i in 1:n.users){
movies[i] <- mov.train[i,]
rank[i] <- na.omit(mov.train[i, ])
return(list(rank = rank, movies = movies))
}
for(i in 1:n.users){
movies[i] <- mov.train[i,]
rank <- na.omit(mov.train[i, ])
return(list(rank = rank, movies = movies))
}
View(movies)
View(rank)
rank2 <- na.omit(mov.train[2, ])
View(rank2)
aic[i, c] <- aic[i, c]*gamma.norm[movies[i, k], c, rank[k]]
for(i in 1:n.users){
movies <- mov.train[i, ]
rank <- na.omit(mov.train[i, ])
for(c in 1:C) {
for(k in 1:6){
aic[i, c] <- aic[i, c]*gamma.norm[movies[i, k], c, rank[k]]
}
return(aic)
}
for(i in 1:n.users){
movies <- mov.train[i, ]
rank <- na.omit(mov.train[i, ])
for(c in 1:C) {
for(k in 1:6){
aic[i, c] <- aic[i, c]*gamma.norm[movies[k], c, rank[k]]
}
return(aic)
}
dim(gamma)
gamma <- gamma/mean(gamma)
for(i in 1:n.users){
movies <- which(!is.na(mov.train[i,]))
rank <- na.omit(mov.train[i, ])
for(c in 1:C) {
aic[i,c] <- mu[c]
for(k in 1:6){
aic[i, c] <- aic[i, c]*gamma[movies[k], c, rank[k]]
}
return(aic)
}
for(i in 1:n.users){
movies <- which(!is.na(mov.train[i,]))
rank <- na.omit(mov.train[i, ])
for(c in 1:C) {
for(k in 1:6){
aic[i, c] <- mu[c]*gamma[movies[k], c, rank[k]]
}
return(aic)
}
gamma <- array(1/k, dim = c(C, n.items, k)) # dims = items(movies), clusters, ratings
gamma <- gamma/mean(gamma)
## Expectation Step
for(i in 1:n.users){
movies <- which(!is.na(mov.train[i,]))
rank <- na.omit(mov.train[i, ])
for(c in 1:C) {
for(k in 1:6){
aic[i, c] <- mu[c]*gamma[c, movies[k], rank[k]]
}
return(aic)
}
dim(gamma)
dim(movies)
for(i in 1:n.users){
movies <- mov.train[i,])
for(i in 1:n.users){
movies <- mov.train[i,]
rank <- na.omit(mov.train[i, ])
for(c in 1:C) {
for(k in 1:6){
aic[i, c] <- mu[c]*gamma[c, movies[k], rank[k]]
}
return(aic)
}
gamma[1, 1, 1]
gamma <- array(1/6, dim = c(n_items, C, k)) # dims = items(movies), clusters, ratings
gamma[1,1,1]
gamma <- array(1/6, dim = c(k, n_items, C)) # dims = ratings, items(movies), clusters
for(i in 1:n.users){
items <- na.omit(mov.train[i,]) # items that user i ranked/visited
rank <- mov.train[i, na.omit(mov.train[i])]
return(list(items, rank)) }
View(rank)
View(items)
for(i in 1:n.users){
items <- na.omit(mov.train[i,]) # items that user i ranked/visited
rank <- mov.train[i, na.omit(mov.train[i, ])]
return(list(items, rank)) }
View(rank)
cbind(items, rank)
rank - na.omit(mov.train[2, ])
ratings <- mov.train[1, !is.na(mov.train[1, ])]
View(ratings)
movies_i <- which(!is.na(mov.train[1,]))
View(movies_i)
length(movies_i)
length(ratings)
cbind(movies_i, ratings)
x <- cbind(movies_i, ratings)
View(x)
View(movies)
View(items)
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i,])# items that user i ranked/visited
rank <- na.omit(mov.train[i,]) # specific rankings of items
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
return(list(items, rank)) }
View(items)
View(rank)
gamma <- array(1/6, dim = c(k, n_items, C)) # dims = ratings, items(movies), clusters
aic <- matrix(NA, nrow = n.users, ncol = C)
gamma <- gamma/mean(gamma)
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(l in 1:C) {
for(k in 1:6){
aic[i, c] <- mu[c]*gamma[rank[k], movies[k], c]
}
return(aic)
}
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(j in 1:n.items){
aic[i, ] <- mu*gamma[rank[j], movies[j], ]
}
return(aic)
}
View(mu)
mu[1]
mu[2]
length(rank)
length(items)
length(n.items)
dim(data)[2]
n.items <- dim(data)[2]
n.items <- dim(mov.train)[2]
n.items
rank[1619]
rank[k]
rank[6]
rank[1]
View(rank)
rank[[1]]
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(j in 1:n.items){
for(c in 1:C) {
aic[i, c] <- mu[c]*gamma[rank[[j]], movies[[j]], c]
}
return(aic)
}
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:n.items){
aic[i, c] <- mu[c]*gamma[rank[[k]], movies[[k]], c]
}
return(aic)
}
rank[[1]]
movies[[1]]
movies[[6]]
rank[[6]]
rank[6]
View(rank)
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(movies)){
aic[i, c] <- mu[c]*gamma[rank[[k]], movies[[k]], c]
}
return(aic)
}
length(movies)
length(items)
for(i in 1:n.users){
items[i] <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
}
items.2 <- which(!is.na(mov.train[2, ]))
length(items.2)
rank.2 <- omit(mov.train[2, ])
rank.2 <- na.omit(mov.train[2, ])
rank.2[105]
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic[i, c] <- mu[c]*gamma[rank[[k], items[[k]], c]
rank.2[[105]]
rank.2[1-5]
rank.2[105]
rank.2[[105]]
View(rank)
View(tiems)
View(items)
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
return(list(items, rank))}
View(items)
View(rank)
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic[i, c] <- mu[c]*gamma[rank[[k], items[[k]], c]
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic[i, c] <- mu[c]*gamma[rank[[k]], items[[k]], c]
}
return(aic)
}
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic[i, c] <- mu[c]*gamma[rank[[k]], items[[k]], c]
i + 1
}
return(aic)
}
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic[i, c] <- mu[c]*gamma[rank[[k]], items[[k]], c]
i + 1
}
return(aic)
}
rank[[372]]
items[372]
items[[372]]
gamma[6, 1619, 12]
dim(gamma)
gamma <- array(1/6, dim = c(6, n_items, C)) # dims = ratings, items(movies), clusters
gamma[6, 1619, 12]
k = 6 # number of ratings
gamma <- array(1/6, dim = c(k, n_items, C)) # dims = ratings, items(movies), clusters
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic[i, c] <- mu[c]*gamma[rank[[k]], items[[k]], c]
}
return(aic)
}
dim(aic)
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic[i, c] <- mu[c]*gamma[rank[[k]], items[[k]], c]
}
aic[i, ] <- aic[i, ]/sum(aic[i, ])
}
dim(aic)
View(aic)
rowSum(aic[1])
rowSums(aic[1])
rowSums(aic[1,])
rowSums(aic)
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic.numer[i, c] <- mu[c]*gamma[rank[[k]], items[[k]], c]
}
aic[i, ] <- aic.numer[i, ]/sum(aic.numer[i, ])
return(aic)
}
aic.numer <- matrix(NA, nrow = n.users, ncol = C)
for(i in 1:n.users){
items <-  which(!is.na(mov.train[i, ]))# items that user i ranked/visited
rank <- na.omit(mov.train[i, ]) # specific rankings of items
for(c in 1:C) {
for(k in 1:length(items)){
aic.numer[i, c] <- mu[c]*gamma[rank[[k]], items[[k]], c]
}
aic[i, ] <- aic.numer[i, ]/sum(aic.numer[i, ])
return(aic)
}
View(aic)
mu <- apply(aic, 2, sum)/length(users) # vector of cluster shares/probabilities
## Estimate Gamma
#gamma <- function() { # this is func is just diagnostic while I am still coding
indicator.numer <- array(0, dim = c(length(users),length(items), k))
indicator.denom <- matrix(0, nrow = length(users), ncol = length(items))
for (i in 1:k)
# can this be done with an apply appoach? yes, apply and margin = 3? but how to use apply with multiple funcs and subsetting, maybe define a func like below?
{
indicator.numer[,,i][which(data == i)] <- 1 # indicator array to identify each instance in which user i rated movie j with rating k
}
rm(list = ls())
